// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: secretflow_serving/config/server_config.proto

package secretflow.serving;

public final class ServerConfigOuterClass {
  private ServerConfigOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ServerConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:secretflow.serving.ServerConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Optional.
     * Feature name mapping rules.
     * Key: source or predefined feature name
     * Value: model feature name
     * </pre>
     *
     * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
     */
    int getFeatureMappingCount();
    /**
     * <pre>
     * Optional.
     * Feature name mapping rules.
     * Key: source or predefined feature name
     * Value: model feature name
     * </pre>
     *
     * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
     */
    boolean containsFeatureMapping(
        java.lang.String key);
    /**
     * Use {@link #getFeatureMappingMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getFeatureMapping();
    /**
     * <pre>
     * Optional.
     * Feature name mapping rules.
     * Key: source or predefined feature name
     * Value: model feature name
     * </pre>
     *
     * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getFeatureMappingMap();
    /**
     * <pre>
     * Optional.
     * Feature name mapping rules.
     * Key: source or predefined feature name
     * Value: model feature name
     * </pre>
     *
     * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
     */
    /* nullable */
java.lang.String getFeatureMappingOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue);
    /**
     * <pre>
     * Optional.
     * Feature name mapping rules.
     * Key: source or predefined feature name
     * Value: model feature name
     * </pre>
     *
     * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
     */
    java.lang.String getFeatureMappingOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * Whether to enable tls for server
     * </pre>
     *
     * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
     * @return Whether the tlsConfig field is set.
     */
    boolean hasTlsConfig();
    /**
     * <pre>
     * Whether to enable tls for server
     * </pre>
     *
     * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
     * @return The tlsConfig.
     */
    secretflow.serving.TlsConfigOuterClass.TlsConfig getTlsConfig();
    /**
     * <pre>
     * Whether to enable tls for server
     * </pre>
     *
     * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
     */
    secretflow.serving.TlsConfigOuterClass.TlsConfigOrBuilder getTlsConfigOrBuilder();

    /**
     * <pre>
     * Brpc builtin service listen port
     * Default: disable service
     * </pre>
     *
     * <code>int32 brpc_builtin_service_port = 11;</code>
     * @return The brpcBuiltinServicePort.
     */
    int getBrpcBuiltinServicePort();

    /**
     * <pre>
     * Whether `/metrics` service is enable/disable.
     * </pre>
     *
     * <code>int32 metrics_exposer_port = 12;</code>
     * @return The metricsExposerPort.
     */
    int getMetricsExposerPort();

    /**
     * <pre>
     * Number of pthreads that server runs on.
     * If this option &lt;= 0, use default value.
     * Default: #cpu-cores
     * </pre>
     *
     * <code>int32 worker_num = 13;</code>
     * @return The workerNum.
     */
    int getWorkerNum();

    /**
     * <pre>
     * Server-level max number of requests processed in parallel
     * Default: 0 (unlimited)
     * </pre>
     *
     * <code>int32 max_concurrency = 14;</code>
     * @return The maxConcurrency.
     */
    int getMaxConcurrency();

    /**
     * <pre>
     * Number of pthreads that server runs to execute ops.
     * If this option &lt;= 0, use default value.
     * Default: #cpu-cores
     * </pre>
     *
     * <code>int32 op_exec_worker_num = 15;</code>
     * @return The opExecWorkerNum.
     */
    int getOpExecWorkerNum();
  }
  /**
   * Protobuf type {@code secretflow.serving.ServerConfig}
   */
  public static final class ServerConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:secretflow.serving.ServerConfig)
      ServerConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ServerConfig.newBuilder() to construct.
    private ServerConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ServerConfig() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ServerConfig();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return secretflow.serving.ServerConfigOuterClass.internal_static_secretflow_serving_ServerConfig_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetFeatureMapping();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return secretflow.serving.ServerConfigOuterClass.internal_static_secretflow_serving_ServerConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              secretflow.serving.ServerConfigOuterClass.ServerConfig.class, secretflow.serving.ServerConfigOuterClass.ServerConfig.Builder.class);
    }

    public static final int FEATURE_MAPPING_FIELD_NUMBER = 1;
    private static final class FeatureMappingDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  secretflow.serving.ServerConfigOuterClass.internal_static_secretflow_serving_ServerConfig_FeatureMappingEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> featureMapping_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetFeatureMapping() {
      if (featureMapping_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            FeatureMappingDefaultEntryHolder.defaultEntry);
      }
      return featureMapping_;
    }
    public int getFeatureMappingCount() {
      return internalGetFeatureMapping().getMap().size();
    }
    /**
     * <pre>
     * Optional.
     * Feature name mapping rules.
     * Key: source or predefined feature name
     * Value: model feature name
     * </pre>
     *
     * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
     */
    @java.lang.Override
    public boolean containsFeatureMapping(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetFeatureMapping().getMap().containsKey(key);
    }
    /**
     * Use {@link #getFeatureMappingMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getFeatureMapping() {
      return getFeatureMappingMap();
    }
    /**
     * <pre>
     * Optional.
     * Feature name mapping rules.
     * Key: source or predefined feature name
     * Value: model feature name
     * </pre>
     *
     * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getFeatureMappingMap() {
      return internalGetFeatureMapping().getMap();
    }
    /**
     * <pre>
     * Optional.
     * Feature name mapping rules.
     * Key: source or predefined feature name
     * Value: model feature name
     * </pre>
     *
     * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getFeatureMappingOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetFeatureMapping().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Optional.
     * Feature name mapping rules.
     * Key: source or predefined feature name
     * Value: model feature name
     * </pre>
     *
     * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
     */
    @java.lang.Override
    public java.lang.String getFeatureMappingOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetFeatureMapping().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int TLS_CONFIG_FIELD_NUMBER = 2;
    private secretflow.serving.TlsConfigOuterClass.TlsConfig tlsConfig_;
    /**
     * <pre>
     * Whether to enable tls for server
     * </pre>
     *
     * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
     * @return Whether the tlsConfig field is set.
     */
    @java.lang.Override
    public boolean hasTlsConfig() {
      return tlsConfig_ != null;
    }
    /**
     * <pre>
     * Whether to enable tls for server
     * </pre>
     *
     * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
     * @return The tlsConfig.
     */
    @java.lang.Override
    public secretflow.serving.TlsConfigOuterClass.TlsConfig getTlsConfig() {
      return tlsConfig_ == null ? secretflow.serving.TlsConfigOuterClass.TlsConfig.getDefaultInstance() : tlsConfig_;
    }
    /**
     * <pre>
     * Whether to enable tls for server
     * </pre>
     *
     * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
     */
    @java.lang.Override
    public secretflow.serving.TlsConfigOuterClass.TlsConfigOrBuilder getTlsConfigOrBuilder() {
      return tlsConfig_ == null ? secretflow.serving.TlsConfigOuterClass.TlsConfig.getDefaultInstance() : tlsConfig_;
    }

    public static final int BRPC_BUILTIN_SERVICE_PORT_FIELD_NUMBER = 11;
    private int brpcBuiltinServicePort_ = 0;
    /**
     * <pre>
     * Brpc builtin service listen port
     * Default: disable service
     * </pre>
     *
     * <code>int32 brpc_builtin_service_port = 11;</code>
     * @return The brpcBuiltinServicePort.
     */
    @java.lang.Override
    public int getBrpcBuiltinServicePort() {
      return brpcBuiltinServicePort_;
    }

    public static final int METRICS_EXPOSER_PORT_FIELD_NUMBER = 12;
    private int metricsExposerPort_ = 0;
    /**
     * <pre>
     * Whether `/metrics` service is enable/disable.
     * </pre>
     *
     * <code>int32 metrics_exposer_port = 12;</code>
     * @return The metricsExposerPort.
     */
    @java.lang.Override
    public int getMetricsExposerPort() {
      return metricsExposerPort_;
    }

    public static final int WORKER_NUM_FIELD_NUMBER = 13;
    private int workerNum_ = 0;
    /**
     * <pre>
     * Number of pthreads that server runs on.
     * If this option &lt;= 0, use default value.
     * Default: #cpu-cores
     * </pre>
     *
     * <code>int32 worker_num = 13;</code>
     * @return The workerNum.
     */
    @java.lang.Override
    public int getWorkerNum() {
      return workerNum_;
    }

    public static final int MAX_CONCURRENCY_FIELD_NUMBER = 14;
    private int maxConcurrency_ = 0;
    /**
     * <pre>
     * Server-level max number of requests processed in parallel
     * Default: 0 (unlimited)
     * </pre>
     *
     * <code>int32 max_concurrency = 14;</code>
     * @return The maxConcurrency.
     */
    @java.lang.Override
    public int getMaxConcurrency() {
      return maxConcurrency_;
    }

    public static final int OP_EXEC_WORKER_NUM_FIELD_NUMBER = 15;
    private int opExecWorkerNum_ = 0;
    /**
     * <pre>
     * Number of pthreads that server runs to execute ops.
     * If this option &lt;= 0, use default value.
     * Default: #cpu-cores
     * </pre>
     *
     * <code>int32 op_exec_worker_num = 15;</code>
     * @return The opExecWorkerNum.
     */
    @java.lang.Override
    public int getOpExecWorkerNum() {
      return opExecWorkerNum_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetFeatureMapping(),
          FeatureMappingDefaultEntryHolder.defaultEntry,
          1);
      if (tlsConfig_ != null) {
        output.writeMessage(2, getTlsConfig());
      }
      if (brpcBuiltinServicePort_ != 0) {
        output.writeInt32(11, brpcBuiltinServicePort_);
      }
      if (metricsExposerPort_ != 0) {
        output.writeInt32(12, metricsExposerPort_);
      }
      if (workerNum_ != 0) {
        output.writeInt32(13, workerNum_);
      }
      if (maxConcurrency_ != 0) {
        output.writeInt32(14, maxConcurrency_);
      }
      if (opExecWorkerNum_ != 0) {
        output.writeInt32(15, opExecWorkerNum_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetFeatureMapping().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        featureMapping__ = FeatureMappingDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, featureMapping__);
      }
      if (tlsConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTlsConfig());
      }
      if (brpcBuiltinServicePort_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, brpcBuiltinServicePort_);
      }
      if (metricsExposerPort_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, metricsExposerPort_);
      }
      if (workerNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, workerNum_);
      }
      if (maxConcurrency_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, maxConcurrency_);
      }
      if (opExecWorkerNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, opExecWorkerNum_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof secretflow.serving.ServerConfigOuterClass.ServerConfig)) {
        return super.equals(obj);
      }
      secretflow.serving.ServerConfigOuterClass.ServerConfig other = (secretflow.serving.ServerConfigOuterClass.ServerConfig) obj;

      if (!internalGetFeatureMapping().equals(
          other.internalGetFeatureMapping())) return false;
      if (hasTlsConfig() != other.hasTlsConfig()) return false;
      if (hasTlsConfig()) {
        if (!getTlsConfig()
            .equals(other.getTlsConfig())) return false;
      }
      if (getBrpcBuiltinServicePort()
          != other.getBrpcBuiltinServicePort()) return false;
      if (getMetricsExposerPort()
          != other.getMetricsExposerPort()) return false;
      if (getWorkerNum()
          != other.getWorkerNum()) return false;
      if (getMaxConcurrency()
          != other.getMaxConcurrency()) return false;
      if (getOpExecWorkerNum()
          != other.getOpExecWorkerNum()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetFeatureMapping().getMap().isEmpty()) {
        hash = (37 * hash) + FEATURE_MAPPING_FIELD_NUMBER;
        hash = (53 * hash) + internalGetFeatureMapping().hashCode();
      }
      if (hasTlsConfig()) {
        hash = (37 * hash) + TLS_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getTlsConfig().hashCode();
      }
      hash = (37 * hash) + BRPC_BUILTIN_SERVICE_PORT_FIELD_NUMBER;
      hash = (53 * hash) + getBrpcBuiltinServicePort();
      hash = (37 * hash) + METRICS_EXPOSER_PORT_FIELD_NUMBER;
      hash = (53 * hash) + getMetricsExposerPort();
      hash = (37 * hash) + WORKER_NUM_FIELD_NUMBER;
      hash = (53 * hash) + getWorkerNum();
      hash = (37 * hash) + MAX_CONCURRENCY_FIELD_NUMBER;
      hash = (53 * hash) + getMaxConcurrency();
      hash = (37 * hash) + OP_EXEC_WORKER_NUM_FIELD_NUMBER;
      hash = (53 * hash) + getOpExecWorkerNum();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static secretflow.serving.ServerConfigOuterClass.ServerConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(secretflow.serving.ServerConfigOuterClass.ServerConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code secretflow.serving.ServerConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:secretflow.serving.ServerConfig)
        secretflow.serving.ServerConfigOuterClass.ServerConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return secretflow.serving.ServerConfigOuterClass.internal_static_secretflow_serving_ServerConfig_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetFeatureMapping();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableFeatureMapping();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return secretflow.serving.ServerConfigOuterClass.internal_static_secretflow_serving_ServerConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                secretflow.serving.ServerConfigOuterClass.ServerConfig.class, secretflow.serving.ServerConfigOuterClass.ServerConfig.Builder.class);
      }

      // Construct using secretflow.serving.ServerConfigOuterClass.ServerConfig.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        internalGetMutableFeatureMapping().clear();
        tlsConfig_ = null;
        if (tlsConfigBuilder_ != null) {
          tlsConfigBuilder_.dispose();
          tlsConfigBuilder_ = null;
        }
        brpcBuiltinServicePort_ = 0;
        metricsExposerPort_ = 0;
        workerNum_ = 0;
        maxConcurrency_ = 0;
        opExecWorkerNum_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return secretflow.serving.ServerConfigOuterClass.internal_static_secretflow_serving_ServerConfig_descriptor;
      }

      @java.lang.Override
      public secretflow.serving.ServerConfigOuterClass.ServerConfig getDefaultInstanceForType() {
        return secretflow.serving.ServerConfigOuterClass.ServerConfig.getDefaultInstance();
      }

      @java.lang.Override
      public secretflow.serving.ServerConfigOuterClass.ServerConfig build() {
        secretflow.serving.ServerConfigOuterClass.ServerConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public secretflow.serving.ServerConfigOuterClass.ServerConfig buildPartial() {
        secretflow.serving.ServerConfigOuterClass.ServerConfig result = new secretflow.serving.ServerConfigOuterClass.ServerConfig(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(secretflow.serving.ServerConfigOuterClass.ServerConfig result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.featureMapping_ = internalGetFeatureMapping();
          result.featureMapping_.makeImmutable();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.tlsConfig_ = tlsConfigBuilder_ == null
              ? tlsConfig_
              : tlsConfigBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.brpcBuiltinServicePort_ = brpcBuiltinServicePort_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.metricsExposerPort_ = metricsExposerPort_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.workerNum_ = workerNum_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.maxConcurrency_ = maxConcurrency_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.opExecWorkerNum_ = opExecWorkerNum_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof secretflow.serving.ServerConfigOuterClass.ServerConfig) {
          return mergeFrom((secretflow.serving.ServerConfigOuterClass.ServerConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(secretflow.serving.ServerConfigOuterClass.ServerConfig other) {
        if (other == secretflow.serving.ServerConfigOuterClass.ServerConfig.getDefaultInstance()) return this;
        internalGetMutableFeatureMapping().mergeFrom(
            other.internalGetFeatureMapping());
        bitField0_ |= 0x00000001;
        if (other.hasTlsConfig()) {
          mergeTlsConfig(other.getTlsConfig());
        }
        if (other.getBrpcBuiltinServicePort() != 0) {
          setBrpcBuiltinServicePort(other.getBrpcBuiltinServicePort());
        }
        if (other.getMetricsExposerPort() != 0) {
          setMetricsExposerPort(other.getMetricsExposerPort());
        }
        if (other.getWorkerNum() != 0) {
          setWorkerNum(other.getWorkerNum());
        }
        if (other.getMaxConcurrency() != 0) {
          setMaxConcurrency(other.getMaxConcurrency());
        }
        if (other.getOpExecWorkerNum() != 0) {
          setOpExecWorkerNum(other.getOpExecWorkerNum());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
                featureMapping__ = input.readMessage(
                    FeatureMappingDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableFeatureMapping().getMutableMap().put(
                    featureMapping__.getKey(), featureMapping__.getValue());
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getTlsConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 88: {
                brpcBuiltinServicePort_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 88
              case 96: {
                metricsExposerPort_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 96
              case 104: {
                workerNum_ = input.readInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 104
              case 112: {
                maxConcurrency_ = input.readInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 112
              case 120: {
                opExecWorkerNum_ = input.readInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 120
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> featureMapping_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetFeatureMapping() {
        if (featureMapping_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              FeatureMappingDefaultEntryHolder.defaultEntry);
        }
        return featureMapping_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetMutableFeatureMapping() {
        if (featureMapping_ == null) {
          featureMapping_ = com.google.protobuf.MapField.newMapField(
              FeatureMappingDefaultEntryHolder.defaultEntry);
        }
        if (!featureMapping_.isMutable()) {
          featureMapping_ = featureMapping_.copy();
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return featureMapping_;
      }
      public int getFeatureMappingCount() {
        return internalGetFeatureMapping().getMap().size();
      }
      /**
       * <pre>
       * Optional.
       * Feature name mapping rules.
       * Key: source or predefined feature name
       * Value: model feature name
       * </pre>
       *
       * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
       */
      @java.lang.Override
      public boolean containsFeatureMapping(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetFeatureMapping().getMap().containsKey(key);
      }
      /**
       * Use {@link #getFeatureMappingMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getFeatureMapping() {
        return getFeatureMappingMap();
      }
      /**
       * <pre>
       * Optional.
       * Feature name mapping rules.
       * Key: source or predefined feature name
       * Value: model feature name
       * </pre>
       *
       * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.String> getFeatureMappingMap() {
        return internalGetFeatureMapping().getMap();
      }
      /**
       * <pre>
       * Optional.
       * Feature name mapping rules.
       * Key: source or predefined feature name
       * Value: model feature name
       * </pre>
       *
       * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
       */
      @java.lang.Override
      public /* nullable */
java.lang.String getFeatureMappingOrDefault(
          java.lang.String key,
          /* nullable */
java.lang.String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetFeatureMapping().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Optional.
       * Feature name mapping rules.
       * Key: source or predefined feature name
       * Value: model feature name
       * </pre>
       *
       * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
       */
      @java.lang.Override
      public java.lang.String getFeatureMappingOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetFeatureMapping().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearFeatureMapping() {
        bitField0_ = (bitField0_ & ~0x00000001);
        internalGetMutableFeatureMapping().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Optional.
       * Feature name mapping rules.
       * Key: source or predefined feature name
       * Value: model feature name
       * </pre>
       *
       * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
       */
      public Builder removeFeatureMapping(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableFeatureMapping().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
          getMutableFeatureMapping() {
        bitField0_ |= 0x00000001;
        return internalGetMutableFeatureMapping().getMutableMap();
      }
      /**
       * <pre>
       * Optional.
       * Feature name mapping rules.
       * Key: source or predefined feature name
       * Value: model feature name
       * </pre>
       *
       * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
       */
      public Builder putFeatureMapping(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) { throw new NullPointerException("map value"); }
        internalGetMutableFeatureMapping().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Optional.
       * Feature name mapping rules.
       * Key: source or predefined feature name
       * Value: model feature name
       * </pre>
       *
       * <code>map&lt;string, string&gt; feature_mapping = 1;</code>
       */
      public Builder putAllFeatureMapping(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableFeatureMapping().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000001;
        return this;
      }

      private secretflow.serving.TlsConfigOuterClass.TlsConfig tlsConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          secretflow.serving.TlsConfigOuterClass.TlsConfig, secretflow.serving.TlsConfigOuterClass.TlsConfig.Builder, secretflow.serving.TlsConfigOuterClass.TlsConfigOrBuilder> tlsConfigBuilder_;
      /**
       * <pre>
       * Whether to enable tls for server
       * </pre>
       *
       * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
       * @return Whether the tlsConfig field is set.
       */
      public boolean hasTlsConfig() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Whether to enable tls for server
       * </pre>
       *
       * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
       * @return The tlsConfig.
       */
      public secretflow.serving.TlsConfigOuterClass.TlsConfig getTlsConfig() {
        if (tlsConfigBuilder_ == null) {
          return tlsConfig_ == null ? secretflow.serving.TlsConfigOuterClass.TlsConfig.getDefaultInstance() : tlsConfig_;
        } else {
          return tlsConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Whether to enable tls for server
       * </pre>
       *
       * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
       */
      public Builder setTlsConfig(secretflow.serving.TlsConfigOuterClass.TlsConfig value) {
        if (tlsConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tlsConfig_ = value;
        } else {
          tlsConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to enable tls for server
       * </pre>
       *
       * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
       */
      public Builder setTlsConfig(
          secretflow.serving.TlsConfigOuterClass.TlsConfig.Builder builderForValue) {
        if (tlsConfigBuilder_ == null) {
          tlsConfig_ = builderForValue.build();
        } else {
          tlsConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to enable tls for server
       * </pre>
       *
       * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
       */
      public Builder mergeTlsConfig(secretflow.serving.TlsConfigOuterClass.TlsConfig value) {
        if (tlsConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            tlsConfig_ != null &&
            tlsConfig_ != secretflow.serving.TlsConfigOuterClass.TlsConfig.getDefaultInstance()) {
            getTlsConfigBuilder().mergeFrom(value);
          } else {
            tlsConfig_ = value;
          }
        } else {
          tlsConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to enable tls for server
       * </pre>
       *
       * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
       */
      public Builder clearTlsConfig() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tlsConfig_ = null;
        if (tlsConfigBuilder_ != null) {
          tlsConfigBuilder_.dispose();
          tlsConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to enable tls for server
       * </pre>
       *
       * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
       */
      public secretflow.serving.TlsConfigOuterClass.TlsConfig.Builder getTlsConfigBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getTlsConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Whether to enable tls for server
       * </pre>
       *
       * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
       */
      public secretflow.serving.TlsConfigOuterClass.TlsConfigOrBuilder getTlsConfigOrBuilder() {
        if (tlsConfigBuilder_ != null) {
          return tlsConfigBuilder_.getMessageOrBuilder();
        } else {
          return tlsConfig_ == null ?
              secretflow.serving.TlsConfigOuterClass.TlsConfig.getDefaultInstance() : tlsConfig_;
        }
      }
      /**
       * <pre>
       * Whether to enable tls for server
       * </pre>
       *
       * <code>.secretflow.serving.TlsConfig tls_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          secretflow.serving.TlsConfigOuterClass.TlsConfig, secretflow.serving.TlsConfigOuterClass.TlsConfig.Builder, secretflow.serving.TlsConfigOuterClass.TlsConfigOrBuilder> 
          getTlsConfigFieldBuilder() {
        if (tlsConfigBuilder_ == null) {
          tlsConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              secretflow.serving.TlsConfigOuterClass.TlsConfig, secretflow.serving.TlsConfigOuterClass.TlsConfig.Builder, secretflow.serving.TlsConfigOuterClass.TlsConfigOrBuilder>(
                  getTlsConfig(),
                  getParentForChildren(),
                  isClean());
          tlsConfig_ = null;
        }
        return tlsConfigBuilder_;
      }

      private int brpcBuiltinServicePort_ ;
      /**
       * <pre>
       * Brpc builtin service listen port
       * Default: disable service
       * </pre>
       *
       * <code>int32 brpc_builtin_service_port = 11;</code>
       * @return The brpcBuiltinServicePort.
       */
      @java.lang.Override
      public int getBrpcBuiltinServicePort() {
        return brpcBuiltinServicePort_;
      }
      /**
       * <pre>
       * Brpc builtin service listen port
       * Default: disable service
       * </pre>
       *
       * <code>int32 brpc_builtin_service_port = 11;</code>
       * @param value The brpcBuiltinServicePort to set.
       * @return This builder for chaining.
       */
      public Builder setBrpcBuiltinServicePort(int value) {

        brpcBuiltinServicePort_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Brpc builtin service listen port
       * Default: disable service
       * </pre>
       *
       * <code>int32 brpc_builtin_service_port = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearBrpcBuiltinServicePort() {
        bitField0_ = (bitField0_ & ~0x00000004);
        brpcBuiltinServicePort_ = 0;
        onChanged();
        return this;
      }

      private int metricsExposerPort_ ;
      /**
       * <pre>
       * Whether `/metrics` service is enable/disable.
       * </pre>
       *
       * <code>int32 metrics_exposer_port = 12;</code>
       * @return The metricsExposerPort.
       */
      @java.lang.Override
      public int getMetricsExposerPort() {
        return metricsExposerPort_;
      }
      /**
       * <pre>
       * Whether `/metrics` service is enable/disable.
       * </pre>
       *
       * <code>int32 metrics_exposer_port = 12;</code>
       * @param value The metricsExposerPort to set.
       * @return This builder for chaining.
       */
      public Builder setMetricsExposerPort(int value) {

        metricsExposerPort_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether `/metrics` service is enable/disable.
       * </pre>
       *
       * <code>int32 metrics_exposer_port = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetricsExposerPort() {
        bitField0_ = (bitField0_ & ~0x00000008);
        metricsExposerPort_ = 0;
        onChanged();
        return this;
      }

      private int workerNum_ ;
      /**
       * <pre>
       * Number of pthreads that server runs on.
       * If this option &lt;= 0, use default value.
       * Default: #cpu-cores
       * </pre>
       *
       * <code>int32 worker_num = 13;</code>
       * @return The workerNum.
       */
      @java.lang.Override
      public int getWorkerNum() {
        return workerNum_;
      }
      /**
       * <pre>
       * Number of pthreads that server runs on.
       * If this option &lt;= 0, use default value.
       * Default: #cpu-cores
       * </pre>
       *
       * <code>int32 worker_num = 13;</code>
       * @param value The workerNum to set.
       * @return This builder for chaining.
       */
      public Builder setWorkerNum(int value) {

        workerNum_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of pthreads that server runs on.
       * If this option &lt;= 0, use default value.
       * Default: #cpu-cores
       * </pre>
       *
       * <code>int32 worker_num = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearWorkerNum() {
        bitField0_ = (bitField0_ & ~0x00000010);
        workerNum_ = 0;
        onChanged();
        return this;
      }

      private int maxConcurrency_ ;
      /**
       * <pre>
       * Server-level max number of requests processed in parallel
       * Default: 0 (unlimited)
       * </pre>
       *
       * <code>int32 max_concurrency = 14;</code>
       * @return The maxConcurrency.
       */
      @java.lang.Override
      public int getMaxConcurrency() {
        return maxConcurrency_;
      }
      /**
       * <pre>
       * Server-level max number of requests processed in parallel
       * Default: 0 (unlimited)
       * </pre>
       *
       * <code>int32 max_concurrency = 14;</code>
       * @param value The maxConcurrency to set.
       * @return This builder for chaining.
       */
      public Builder setMaxConcurrency(int value) {

        maxConcurrency_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server-level max number of requests processed in parallel
       * Default: 0 (unlimited)
       * </pre>
       *
       * <code>int32 max_concurrency = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxConcurrency() {
        bitField0_ = (bitField0_ & ~0x00000020);
        maxConcurrency_ = 0;
        onChanged();
        return this;
      }

      private int opExecWorkerNum_ ;
      /**
       * <pre>
       * Number of pthreads that server runs to execute ops.
       * If this option &lt;= 0, use default value.
       * Default: #cpu-cores
       * </pre>
       *
       * <code>int32 op_exec_worker_num = 15;</code>
       * @return The opExecWorkerNum.
       */
      @java.lang.Override
      public int getOpExecWorkerNum() {
        return opExecWorkerNum_;
      }
      /**
       * <pre>
       * Number of pthreads that server runs to execute ops.
       * If this option &lt;= 0, use default value.
       * Default: #cpu-cores
       * </pre>
       *
       * <code>int32 op_exec_worker_num = 15;</code>
       * @param value The opExecWorkerNum to set.
       * @return This builder for chaining.
       */
      public Builder setOpExecWorkerNum(int value) {

        opExecWorkerNum_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of pthreads that server runs to execute ops.
       * If this option &lt;= 0, use default value.
       * Default: #cpu-cores
       * </pre>
       *
       * <code>int32 op_exec_worker_num = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearOpExecWorkerNum() {
        bitField0_ = (bitField0_ & ~0x00000040);
        opExecWorkerNum_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:secretflow.serving.ServerConfig)
    }

    // @@protoc_insertion_point(class_scope:secretflow.serving.ServerConfig)
    private static final secretflow.serving.ServerConfigOuterClass.ServerConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new secretflow.serving.ServerConfigOuterClass.ServerConfig();
    }

    public static secretflow.serving.ServerConfigOuterClass.ServerConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ServerConfig>
        PARSER = new com.google.protobuf.AbstractParser<ServerConfig>() {
      @java.lang.Override
      public ServerConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ServerConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ServerConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public secretflow.serving.ServerConfigOuterClass.ServerConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_secretflow_serving_ServerConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_secretflow_serving_ServerConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_secretflow_serving_ServerConfig_FeatureMappingEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_secretflow_serving_ServerConfig_FeatureMappingEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n-secretflow_serving/config/server_confi" +
      "g.proto\022\022secretflow.serving\032*secretflow_" +
      "serving/config/tls_config.proto\"\321\002\n\014Serv" +
      "erConfig\022M\n\017feature_mapping\030\001 \003(\01324.secr" +
      "etflow.serving.ServerConfig.FeatureMappi" +
      "ngEntry\0221\n\ntls_config\030\002 \001(\0132\035.secretflow" +
      ".serving.TlsConfig\022!\n\031brpc_builtin_servi" +
      "ce_port\030\013 \001(\005\022\034\n\024metrics_exposer_port\030\014 " +
      "\001(\005\022\022\n\nworker_num\030\r \001(\005\022\027\n\017max_concurren" +
      "cy\030\016 \001(\005\022\032\n\022op_exec_worker_num\030\017 \001(\005\0325\n\023" +
      "FeatureMappingEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu" +
      "e\030\002 \001(\t:\0028\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          secretflow.serving.TlsConfigOuterClass.getDescriptor(),
        });
    internal_static_secretflow_serving_ServerConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_secretflow_serving_ServerConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_secretflow_serving_ServerConfig_descriptor,
        new java.lang.String[] { "FeatureMapping", "TlsConfig", "BrpcBuiltinServicePort", "MetricsExposerPort", "WorkerNum", "MaxConcurrency", "OpExecWorkerNum", });
    internal_static_secretflow_serving_ServerConfig_FeatureMappingEntry_descriptor =
      internal_static_secretflow_serving_ServerConfig_descriptor.getNestedTypes().get(0);
    internal_static_secretflow_serving_ServerConfig_FeatureMappingEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_secretflow_serving_ServerConfig_FeatureMappingEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    secretflow.serving.TlsConfigOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
